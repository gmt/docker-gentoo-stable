#!/bin/bash

repo_base=gmtx/gentoo-
parallelism_override=8

thedate=$(date -u '+%Y%m%d')
variant=$( echo "$(basename $(pwd))" | sed 's/[[:space:]]/_/g;s/\./-/g')

# may get blanked out to indicate no logging
#
defaultlogfile="$(pwd)/build-${variant}.log"
logfile=${defaultlogfile}

# autogenerated tag name, invariant
fullthingy="${repo_base}${variant}:${thedate}"

# may get modified by user arguments. 
#
tagnames=("${fullthingy}" "${fullthingy%%:*}:latest")

usage() {
	echo "$0: Build a gentoo image"
	echo
	echo "USAGE: $0 [-q|--quiet] [-l|--log][=FILENAME]] [-b|--background] [-t|--tag][=TAG] [-k|--kidding]"
	echo
	echo "     -q|--quiet: Don't show output on stdout.  Incompatible with --kidding."
	echo
	echo "       -l|--log: Output to logfile.  Default logfile is:"
	echo
	echo "                     \"${defaultlogfile}\""
	echo
	echo "                 If used without an argument, logging will be deactivated."
	echo
	echo "-b|--background: Run in the background (implies -q).  Incompatible with"
	echo "                 --kidding"
	echo
	echo "       -t|--tag: Tag control.  If no TAG is provided, don't tag anything."
	echo "                 Otherwise, default is to tag:"
	echo
	echo "                     \"${fullthingy}\"."
	echo
	echo "                 and also to update the :latest tag to this.  May be provided"
	echo "                 more than once to apply multiple tags manually.  If any -t"
	echo "                 or --tag arguments are provided the default behavior is suppressed"
	echo "                 and only provided tags are applied."
	echo
	echo "   -k|--kidding: Just kidding, don't really do that.  Show what would happen if"
	echo "                 serious.  Incompatible with --background and --quiet."
	echo
}

badargument() {
	echo "Bad argument: \"$1\"." >&2
	echo >&2
	usage
	exit 1
}

# process arguments
#
quiet=
background=
kidding=
argpending=
customtags=
for anargument in "$@"; do
	argument=${anargument}
	if [[ ! ${argpending} ]]; then
		case ${argument} in
			-l*) argument="--log${argument#-l}" ;;
			-t*) argument="--tag${argument#-t}" ;;
		esac
	fi
	case ${argument} in
		-q|--quiet)
			[[ ${kidding} ]] && badargument "${anargument}"
			quiet=yes
			argpending=
			;;
		-b|--background)
			[[ ${kidding} ]] && badargument "${anargument}"
			background=yes
			quiet=yes
			argpending=
			;;
		-k|--kidding)
			[[ ${quiet} ]] && badargument "${anargument}"
			kidding=yes
			argpending=
			;;
		--log)
			logfile=
			argpending=log
			;;
		--log=*)
			argument=${argument#--log=}
			logfile=${argument}
			argpending=
			;;
		--tag)
			argpending=tag
			[[ ${customtags} ]] || tagnames=()
			customtags=yes
			;;
		--tag=*)
			argument=${argument#--tag=}
			[[ ${customtags} ]] && tagnames+=( ${argument} )
			[[ ${customtags} ]] || tagnames=( ${argument} )
			customtags=yes
			argpending=
			;;
		-h|--help)
			usage
			exit 0
			;;
		*)
			if [[ ${argpending} == log ]]; then
				logfile=${anargument}
				argpending=
			elif [[ ${argpending} == tag ]]; then
				tagnames+=( "${anargument}" )
				argpending=
			else
				badargument "${anargument}"
			fi
			;;
	esac
done

# ensure Dockerfile exists in cwd
[[ -f $(pwd)/Dockerfile ]] || \
	{ echo "No Dockerfile in \"$(pwd)\"." >&2 ; exit 1 ; }

old_parallelism=$( grep '^ENV[[:space:]][[:space:]]*PROV_EMERGE_PARALLELISM[[:space:]]' Dockerfile 2>/dev/null | \
	sed -e 's|^\(ENV\sPROV_EMERGE_PARALLELISM\s\)[[:space:]]*||;s|[[:space:]]*$||' )

# force parallelism
if [[ ${parallelism_override} ]]; then
	[[ ${kidding} ]] || \
		sed -e "s|^\\(ENV\\sPROV_EMERGE_PARALLELISM\\s\\).*\$|\\1${parallelism_override}|" \
		    -i Dockerfile || exit 1
fi

# auto stdout+stderr redirecting wrapper
bucket() {
	set -o pipefail
	rslt=0
	{ ( "$@" 2>&1 ) |& \
		if [[ ${quiet} ]]; then
			tee -a ${logfile:-/dev/null} > /dev/null
		else
			tee -a ${logfile:-/dev/null}
		fi ; } || rslt=$?
	set +o pipefail
	return ${rslt}
}

bail() {
	# force non-parallelism
	[[ ${parallelism_override} && \
	   ${old_parallelism} != ${parallelism_override} && \
	   ! ( ${kidding} ) ]] && \
		sed -e "s|^\\(ENV\\sPROV_EMERGE_PARALLELISM\\s\\).*\$|\\1${old_parallelism}|" \
		    -i Dockerfile || exit 1
	exit "$1"
}

# simply bucket "$@" || bail $?
#
bailbucket() { 
	bucket "$@" || bail $?
}

# even if quiet say just enough to reflect
# that something happened (but only on stderr)
bucket echo "Building ${fullthingy}:"
[[ ${quiet} ]] && echo "Building ${fullthingy}:" >&2
bucket echo
bucket echo "autotags: ( ${tagnames[*]} )"
bucket echo " logfile: \"${logfile}\""
[[ ${quiet} ]] && echo " logfile: \"${logfile}\"" >&2
bucket echo "forking?: ${background:-no}"
bucket echo "kidding?: ${kidding:-no}"
bucket echo "parallel: ${parallelism_override:-${old_parallelism:-na}}/${old_parallelism:-na}"
bucket echo

echodo() {
	local thecmd=( "$@" )
	local fakeprompt="\$ "
	[[ $(id -u) -eq 0 ]] && fakeprompt="\# "
	bucket echo "${fakeprompt}${thecmd[*]}"
	[[ ${kidding} ]] || bucket "${thecmd[@]}"
}

# like echodo but bail on failure
#
echomustdo() {
	local thecmd=( "$@" )
	local fakeprompt="\$ "
	[[ $(id -u) -eq 0 ]] && fakeprompt="\# "

	bucket echo "${fakeprompt}${thecmd[*]}"
	[[ ${kidding} ]] || bailbucket "${thecmd[@]}"
}

# treat the first tag as special and use in the build command if applicable
maintag=
tagbuildstuff=()
if [[ ${#tagnames[*]} -gt 0 ]]; then
	maintag=${tagnames[0]}
	othertags=("${tagnames[@]:1}")
	tagbuildstuff=(-t "${maintag}")
fi

doit() {
	[[ ${logfile} && ! ( ${kidding} ) ]] && \
		echo "=============== building ${repo_base}${variant} $(date) ===============" >> ${logfile}
	echomustdo docker build --rm "${tagbuildstuff[@]}" . && \
		for tag in "${othertags[@]}"; do
			echodo docker tag "${maintag}" "${tag}" || break
		done
}

if [[ ${background} ]]; then
	# fake out the bail routine not to touch parallelism -- we'll
	# fix it ourselves.
	parallelism_override="${old_parallelism}" doit &
else
	doit
fi

bail 0
